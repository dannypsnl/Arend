\import Arith.Int
\import Data.Bool
\import Data.List
\open IntRing (+, *)

\data Pair (A B : \Set)
  | \infix 7 X A B

\data Unit
  | Meter
  | Kilogram
  | Second
\func unit=? (u1 u2 : Unit) : Bool
  | Meter, Meter => true
  | Kilogram, Kilogram => true
  | Second, Second => true
  | _, _ => false

\type Units => List (Pair Unit Int)
\func fold (f : (Pair Unit Int) -> Units -> Units) (b : Units) (l : Units) : Units
  | _, b, nil => b
  | f, b, :: a l => f a (fold f b l)

\data LayeredData (T : \Set) Units
  | Box T

\func unit-* (us1 us2 : Units) : Units => fold insert us2 us1
  \where
    \func insert (u : Pair Unit Int) (us : Units) : Units
      | (X u u-val), :: (X v v-val) xs => \case unit=? u v \with {
        | true => (u X (u-val + v-val)) :: xs
        | false => (v X v-val) :: insert (u X u-val) xs
      }
      | u, nil => u :: nil

\func \infix 6 v-+ {us : Units} (a b : LayeredData Int us) : LayeredData Int us
  | Box v1, Box v2 => Box (v1 + v2)
\func \infix 6 v-* {us1 us2 : Units} (a : LayeredData Int us1) (b : LayeredData Int us2)
  : LayeredData Int (unit-* us1 us2)
  | Box v1, Box v2 => Box (v1 * v2)

\func test-*-1 : LayeredData Int ((Meter X 3) :: (Kilogram X -1) :: (Second X -1) :: nil)
  => g v-* s
  \where
    \func g : LayeredData Int ((Meter X 3) :: (Kilogram X -1) :: (Second X -2) :: nil) => Box 7
    \func s : LayeredData Int ((Second X 1) :: nil) => Box 2

\func test-*-2 (g : LayeredData Int ((Meter X 3) :: (Kilogram X -1) :: (Second X -2) :: nil))
             (s : LayeredData Int ((Second X 1) :: nil))
  : LayeredData Int ((Meter X 3) :: (Kilogram X -1) :: (Second X -1) :: nil)
  | g, s => g v-* s

\func test-+ => s v-+ s
  \where
    \func s : LayeredData Int ((Second X 1) :: nil) => Box 3
